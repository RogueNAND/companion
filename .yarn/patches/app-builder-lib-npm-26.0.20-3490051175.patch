diff --git a/out/node-module-collector/packageManager.js b/out/node-module-collector/packageManager.js
index d13f1928e1463d165a2e21349827eeb61fb72090..11de53c73cdf1ed239c58450def153c28e33a7e6 100644
--- a/out/node-module-collector/packageManager.js
+++ b/out/node-module-collector/packageManager.js
@@ -47,13 +47,13 @@ function detectPackageManagerByEnv(pm) {
     const ua = (_a = process.env.npm_config_user_agent) !== null && _a !== void 0 ? _a : "";
     const execPath = (_c = (_b = process.env.npm_execpath) === null || _b === void 0 ? void 0 : _b.toLowerCase()) !== null && _c !== void 0 ? _c : "";
     const yarnVersion = process.env.YARN_VERSION;
-    const isBerry = (yarnVersion === null || yarnVersion === void 0 ? void 0 : yarnVersion.startsWith("2.")) || (yarnVersion === null || yarnVersion === void 0 ? void 0 : yarnVersion.startsWith("3."));
+    const isBerry = (yarnVersion === null || yarnVersion === void 0 ? void 0 : yarnVersion.startsWith("2.")) || (yarnVersion === null || yarnVersion === void 0 ? void 0 : yarnVersion.startsWith("4."));
     switch (pm) {
         case "pnpm":
-            return ua.includes("pnpm") || execPath.includes("pnpm") || process.env.PNPM_HOME ? PM.PNPM : null;
+            return ua.includes("pnpm") || execPath.includes("pnpm") // || process.env.PNPM_HOME ? PM.PNPM : null;
         case "yarn":
             if (ua.includes("yarn") || execPath.includes("yarn") || process.env.YARN_REGISTRY) {
-                return isBerry || ua.includes("yarn/2") || ua.includes("yarn/3") ? PM.YARN_BERRY : PM.YARN;
+                return isBerry || ua.includes("yarn/2") || ua.includes("yarn/3") || ua.includes("yarn/4") ? PM.YARN_BERRY : PM.YARN;
             }
             return null;
         case "npm":
diff --git a/out/util/filter.js b/out/util/filter.js
index 369783eff5c64c342831dd3544c3f51e490b0e93..7c62723531bc671ee1ae2cd0be36d5297068170e 100644
--- a/out/util/filter.js
+++ b/out/util/filter.js
@@ -41,7 +41,9 @@ function createFilter(src, patterns, excludePatterns) {
         let relative = getRelativePath(file, srcWithEndSlash, stat);
         // filter the root node_modules, but not a subnode_modules (like /appDir/others/foo/node_modules/blah)
         if (relative === "node_modules") {
-            return false;
+            // return false;
+            // HACK: we want the root node_modules
+            return true;
         }
         else if (relative.endsWith("/node_modules")) {
             relative += "/";
